plugins {
    id 'java'
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$dependencyManagementVersion"
}

group = 'com.MyProject'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springBootVersion', "$springBootVersion")
    set('springCloudVersion', "$springCloudVersion")
}
dependencies {
    dependencies {

        implementation project(':Common-ms') // Əgər ümumi model/dto paylaşımı üçün istifadə olunursa saxlanır

        // Spring Boot və WebFlux
        implementation 'org.springframework.boot:spring-boot-starter-webflux'

        // Spring Cloud Gateway və Eureka Discovery
        implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

        // Actuator for health/tracing
        implementation 'org.springframework.boot:spring-boot-starter-actuator'

        // Swagger UI for WebFlux
        implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.0.0'

        // Resilience4j Circuit Breaker integration with Gateway (Reactive)
        implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
        implementation 'io.github.resilience4j:resilience4j-circuitbreaker'

        // Distributed Tracing - Brave & Zipkin
        implementation 'io.micrometer:micrometer-tracing-bridge-brave'
        implementation 'io.zipkin.reporter2:zipkin-reporter-brave'

        // YAML parsing (əksər hallarda Spring özü gətirir, amma bəzən lazımdır)
        implementation 'org.yaml:snakeyaml:2.0'

        // Lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // Testlər
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.register("prepareKotlinBuildScriptModel") {}

tasks.named('test') {
    useJUnitPlatform()
}
}